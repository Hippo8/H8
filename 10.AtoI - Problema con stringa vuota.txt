Scrivere una funzione RISC-V atoi
 che converta una stringa ASCII con un numero intero positivo in una variabile numerica (intero in complemento a 2). Il valore numerico ottenuto deve essere restituito al chiamante nel registro a0
.

Vedere il codice atoi
 in C sottoriportato.

unsigned long atoi(char *str, unsigned long n) {
    if (n == 0)
      return 0;
    return (10*atoi(str, n-1) + str[n-1] - '0');
}

Attenzione:
Incollare nel campo di sotto soltanto il contenuto della funzione atoi
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS
######################			CODE			####################
atoi:
li a6, 1
bne a1, a6, go_ahead # if(n!=1)

######## PER FINE LOOP ######
lbu t0, 0(a0) # dereferenzio str[0]-'0â€™;
addi t0, t0, -48 # risalgo al valore intero
mv a0, t0 # copio risultato in a0
jr ra # return

atoi:
  	bne  a1, zero, go_ahead	# if (n!=0) continue
	add  a0, zero, zero
	jr   ra

go_ahead:
	addi sp, sp, -16
	sd	 ra, 0(sp)
	sd   s1, 8(sp)		
	
	addi a1, a1, -1		# n-1
	add  t0, a0, a1		# offset str[n-1]
	lbu  s1, 0(t0)		# load on s1 value on str[n-1]
	addi s1, s1, -48	# convert it to numeric value: s1=str[n-1] - '0'
	jal  atoi		    # a0 has the result of atoi(str, n-1)
	
	li 	 t0, 10
	mul  t0, t0, a0		# 10 * atoi(str, n-1)
	add  a0, s1, t0	    # atoi(str, n) = 10*atoi(str, n-1) + str[n-1] - '0'
	
	ld 	 ra, 0(sp)
	ld   s1, 8(sp)
	addi sp, sp, 16
	jr   ra

.globl _start
.data
    numstr: .string  "123"
.text
_start:
    # chiama strlen per ottenere la lunghezza della stringa
    la   a0, numstr
    jal  ra, strlen
    
    # chiama atoi
    mv   a1, a0
    la   a0, numstr
    jal  ra, atoi

    #exit
    li   a7, 10
    ecall

#*******************************************************************************
# strlen
# a0 - str
#*******************************************************************************
strlen:
        add  t0, zero, zero
strlen_loop:
        add  t1, t0, a0    
        lbu  t1, 0(t1)     
        beq  t1, zero, strlen_end
        addi t0, t0, 1 
        j    strlen_loop
strlen_end:
        addi a0, t0, 0
        ret   