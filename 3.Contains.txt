Usando il linguaggio assemblativo del RISC-V, scrivere una funzione contains
 che riceva:

sul registro a0
, l'indirizzo in memoria di una stringa (array di byte)
sul registro a1
, un byte che rappresenta un carattere ASCII (low
, limite inferiore)
sul registro a2
, un byte che rappresenta un carattere ASCII (high
, limite superiore)

La funzione ritorna 1
 se la stringa ricevuta contiene almeno un carattere dell'intervallo [low,high]
. La funzione ritorna 0
 caso contrario.

Il seguente codice in C
 realizza contains
 (convertilo in RISC-V):
int contains(char str[], char low, char high) {
    int i=0;
    while (str[i] != 0x00) {
        if (str[i] >= low && str[i] <= high) {
            return 1;
        }
        i++;
    }
    return 0;
}

Attenzione:
Incollare nel campo di sotto soltanto il contenuto della funzione contains
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS
####################		CODE 		############################
contains:
      lbu   t1, 0(a0)                # reads a char and move pointer
      addi  a0, a0, 1

      beqz  t1, contains_zero        # string is over without find char
      blt   t1, a1, contains         # if not in range, continue
      bgt   t1, a2, contains

      li    a0, 1                    # found, return
      ret 
contains_zero:
      li    a0, 0                    # not found, return
      ret

.globl _start
.section .data
    buffer: .string  "test string"
    low:    .byte  'A'
    high:   .byte  'Z'

.text
_start:
    # call contains
    la   a0, buffer
    la   a1, low
    la   a2, high
    lbu  a1, 0(a1)
    lbu  a2, 0(a2)
    jal  ra, contains

    # exit
    li   a7, 10
    ecall