Usando il linguaggio assemblativo del RISC-V, scrivere una funzione passrules
 che riceva:

sul registro a0
, l'indirizzo in memoria di una stringa (array di byte)

La funzione ritorna 1
 se la stringa ricevuta contiene almeno 1 carattere maiuscolo ed almeno 1 carattere cifra. La funzione ritorna 0
 in caso contrario.

Il seguente codice in C
 realizza passrules
 (convertilo in RISC-V):
int passrules(char str[]) {
    int uppercase = contains(str, 'A', 'Z');
    int numbers   = contains(str, '0', '9');
    return (uppercase && numbers);
}

// Tabella ASCII:
// ASCII 'A' -- hex: 0x41 dec: 65
// ASCII 'Z' -- hex: 0x5a dec: 90
// ASCII '0' -- hex: 0x30 dec: 48
// ASCII '9' -- hex: 0x39 dec: 57
Il valore di ritorno deve essere lasciato sul registro a0
.

passrules
 deve utilizzare contains
 sviluppata nell'esercizio precedente.
Attenzione:
NON INCOLLARE IL CODICE DI contains
 NELLA RISPOSTA
Incollare nel campo di sotto soltanto il contenuto della funzione passrules
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice “main” per sviluppo e debugging nel simulatore RARS
#########################		CODE 		###########################
passrules:
      addi  sp, sp, -24
      sd    ra, 0(sp)
      sd    a0, 8(sp)
      sd    s0, 16(sp)

      li    a1, 'A'
      li    a2, 'Z'
      jal   ra, contains
      add   s0, a0, zero

      ld    a0, 8(sp)
      li    a1, '0'
      li    a2, '9'
      jal   ra, contains

      and   a0, a0, s0

      ld    ra, 0(sp)
      ld    s0, 16(sp)
      addi  sp, sp, 24
      ret

.globl _start
.data
      buffer: .string  "BADPass4"
.text
_start:
    # call passrules
    la   a0, buffer
    jal  ra, passrules

    #exit
    li   a7, 10
    ecall



    