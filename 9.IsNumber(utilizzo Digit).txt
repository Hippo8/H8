Scrivere una funzione RISC-V isnumber
 che controlli se una stringa ricevuta come parametro è la rappresentazione di un numero intero positivo in ASCII. Controllare vuol dire: restituire 1 se la condizione è vera, 0 altrimenti. isnumber
 deve utilizzare la funzione digit
 realizzata nell'esercizio precedente.

Il valore di ritorno deve essere lasciato sul registro a0
.

Il seguente codice in C
 realizza isnumber
 (convertilo in RISC-V):
int isnumber(char *numstr) {
    for (int i = 0; numstr[i] != '\0'; i++);
        if (!digit(numstr[i]))
            return 0;
    return 1;
}

Attenzione:
Incollare nel campo di sotto soltanto il contenuto della funzione isnumber
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS
###################			CODE			######################
isnumber:
addi sp, sp, -24
sd ra, 0(sp)
sd a0, 8(sp)
sd s1, 16(sp)
li s1, 0 # int i (cursore su a0)
loop_on_string:
lbu a0, 0(a0) # dereferenzio e carico il char
beqz a0, isnum_return_1 # se sono a fine stringa e se non sono uscito prima, restituisco 1
jal digit # digit riceve in input a0 (contiene il byte che rappresenta il carattere)
beq a0, zero, isnum_return_0 # a0 contiene il risultato di digit
ld a0, 8(sp) # ripristina a0 (sovrascritto da digit): a0 contiene di nuovo un indirizzo
addi s1, s1, 1 # i++
add a0, a0, s1 # sposto ptr al prossimo byte
j loop_on_string
isnum_return_0:
li a0, 0 # set a0 to 0
j return
isnum_return_1:
li a0, 1 # set a0 to 1
return:
ld ra, 0(sp) # restore ra
ld s1, 16(sp) # restore s1
addi sp,sp,24
jr ra 

.globl _start
.data
    numstr: .string  "1234"
.text
_start:
    # call isnumber
    la   a0, numstr
    jal  ra, isnumber

    #exit
    li   a7, 10
    ecall