Tradurre il seguente frammento di codice C in codice assembly RISC-V.

int fib(int n) {
	if (n==0)
		return 0;
	else if (n==1)
		return 1;
	else
		return fib(n–1) + fib(n–2);
}
Il valore di ritorno deve essere lasciato sul registro a0
.
Attenzione:
Incollare nel campo di sotto soltanto il contenuto della funzione fib
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS
###################		CODE		##########################
fib:
beq a0, zero, fine # special case n = 0 --> result = 0
addi t0, zero, 1
beq a0, t0, fine # special case n = 1 --> result = 1
# general case n > 1
addi sp, sp, -16 # create space in stack to save 2 registers
sd ra, 0(sp) # save ra
sd a0, 8(sp) # save parameter
addi a0,a0,-1 # compute n-1
jal fib # compute fib(n-1)
ld t0,8(sp) # recover n from stack
sd a0,8(sp) # since I will not need n again, save fib(n-1) in place of n
addi a0,t0,-2 # compute n-2
jal fib # compute fib(n-2)
ld t0,8(sp) # restore from stack fib(n-1)
add a0,a0,t0 # compute fib(n) = fib(n-1) + fib(n-2)
ld ra,0(sp) # restore the return address
addi sp,sp,16 # restore the stack pointer
fine:
ret

.globl _start
.data
    num: .dword 5
.text
_start:
    # call fib
    la    a0, num
    ld    a0, 0(a0)
    jal   ra, fib

    #exit
    li    a7, 10
    ecall

