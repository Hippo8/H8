Scrivere una procedura RISC-V strcpy
 per copiare una stringa in un'altra. Assumere che dststr
 abbia spazio sufficiente in memoria per ricevere i byte di srcstr
.

Nota: strcpy
 deve utilizzare strlen
, come in questo codice in C:

void strcpy(char *dst, char *src) {
    unsigned long i;
    unsigned long n, m;

    n = strlen(src);    
    m = strlen(dst);

    for (i = 0; i < n; i++)
        dst[i] = src[i];
    for ( ; i < m; i++)
        dst[i] = '\0';
    return;
}

Attenzione:
NON INCOLLARE IL CODICE DI strlen
 NELLA RISPOSTA
Incollare nel campo di sotto soltanto il contenuto della funzione strcpy
 (in RISC-V)
Attenzione alle convenzioni di chiamata!
Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS
##################			CODE 			#########################
strcpy:
addi sp, sp, -32
sd ra, 0(sp)
sd a0, 8(sp)
sd a1, 16(sp)
sd s1, 24(sp)
jal ra, strlen # strlen src
add s1, a0, zero # s1 = n
ld a0, 16(sp) # strlen dst
jal ra, strlen
add t0, a0, zero # t0 = m -> assuming m > n
sub t1, t0, s1 # t1 = m-n
ld a0, 8(sp) # recover a0
ld a1, 16(sp) # recover a1
STRCPY_L1:
beq t0, zero, STRCPY_L4 # done if i == m
ble t0, t1, STRCPY_L2 # if > m-n, copy char
lb t2, 0(a0) # dereference str[i]
sb t2, 0(a1) # str[i] -> dst[i]
addi a0, a0, 1 # increment a0
j STRCPY_L3
STRCPY_L2: # else put a \0
sb zero, 0(a1)
STRCPY_L3:
addi a1, a1, 1 # increment other regs
addi t0, t0, -1
j STRCPY_L1 # loop
STRCPY_L4:
ld s1, 24(sp)
ld ra, 0(sp)
addi sp,sp,32
ret



.globl _start
.data
    srcstr: .string  "string to be copied"
    dststr: .string  "destination string is long enough"
.text
_start:
    
    # chiama strcpy    
    la   a0, srcstr
    la   a1, dststr
    jal  ra, strcpy

    #exit
    li   a7, 10
    ecall

#*******************************************************************************
# strlen
# a0 - str
#*******************************************************************************
strlen:
        add  t0, zero, zero
strlen_loop:
        add  t1, t0, a0    
        lbu  t1, 0(t1)     
        beq  t1, zero, strlen_end
        addi t0, t0, 1 
        j    strlen_loop
strlen_end:
        addi a0, t0, 0
        ret  